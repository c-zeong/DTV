// This file includes the Rust code generated by prost_build from douyin.proto.
// It's placed in the 'gen' directory, which is specified as out_dir in build.rs.

// This assumes prost_build generates a file named 'douyin.rs' in this 'gen' directory.
// If the generated filename is different (e.g., based on a package name in the .proto file),
// adjust 'douyin.rs' accordingly.
include!("douyin.rs");

// If the included 'douyin.rs' itself defines a module, for example:
//   pub mod douyin_proto_types {
//       pub struct PushFrame { /* ... */ }
//       pub struct Response { /* ... */ }
//   }
// Then, from other modules (like message_handler.rs), you would use:
//   use super::super::gen::douyin_proto_types::{PushFrame, Response};
// (super::super to get out of message_handler -> danmu -> gen, then into douyin_proto_types)
// or more directly if paths are re-exported:
//   use crate::platforms::douyin::danmu::gen::douyin_proto_types::{PushFrame, Response};

// If 'douyin.rs' directly contains `pub struct PushFrame;` etc. at its top level,
// then you would use:
//   use super::super::gen::{PushFrame, Response};
// or
//   use crate::platforms::douyin::danmu::gen::{PushFrame, Response};

// For now, we assume that accessing items via `crate::platforms::douyin::danmu::gen::[item]` or 
// `crate::platforms::douyin::danmu::gen::douyin::[item]` will work after compilation,
// depending on how `douyin.rs` is structured by prost. 